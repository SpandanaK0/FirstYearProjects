 import mathPI = math.pi   EARTH_MASS =  5.972E+24    # kgEARTH_RADIUS = 6.371E+6    # metersSOLAR_RADIUS = 6.975E+8    # radius of star in metersAU = 1.496E+11             # distance earth to sun in metersPARSEC_LY = 3.262def open_file():    file_input = input ("Input data to open: ")    while True:                fullFileName = file_input + ".csv"        try:                        open1= open(fullFileName)            return open1                        except FileNotFoundError:            print("\nError: file not found.  Please try again.")            file_input = input ("Input data to open: ")def make_float(s):    try:        change = float(s)        return change    except ValueError:        return -1  def get_density(mass, radius):    if mass<0 or radius <0:        return -1    else:        volume = (4/3)*PI*((radius*EARTH_RADIUS)**3)        density = (mass*EARTH_MASS)/volume         return density    def temp_in_range(axis, star_temp, star_radius, albedo, low_bound, upp_bound):    if axis<0 or star_temp<0 or star_radius<0 or albedo<0:        return False    else:        change_var_rad = star_radius * SOLAR_RADIUS        change_var_axi = axis * AU        planet_temp = (star_temp * (((change_var_rad)/(2*(change_var_axi)))**(1/2))*((1-albedo)**(1/4)))        if low_bound<=planet_temp<=upp_bound:            return True    return Falsedef get_dist_range():    while True:        distance_str = input("\nEnter maximum distance from Earth (light years):")        try:            distance = float(distance_str)            if distance>0:                return distance            else:                print("\nError: Distance needs to be greater than 0.")        except ValueError:            print("\nError: Distance needs to be a float.")            distance_str = input(" \nEnter maximum distance from Earth (light years): ")def main():    print('''Welcome to program that finds nearby exoplanets '''\          '''in circumstellar habitable zone.''')    openFile = open_file()    dist = get_dist_range()    maximum_distance = dist     low_bound= 200    upp_bound= 350    albedo= .5     min_Rock_axis = 1000    min_gas_axis = 1000    max_pl = 0     max_str = 0     count = 0    distance_list =[]    sum_mass = 0    habit = 0     rocky_planet = 0     gas_planet = 0         rocky_close= maximum_distance    rocky_close_name= ""    gas_close = maximum_distance    gas_close_name = ""    for line in openFile:                 distance_in_file = line[114:]        mass_in_file = line[86:96]        num_star_sysm = line[50:57]        num_plan_sysm= line[58:65]        plan_name = line[:25].strip()        axis_in_file = line[66:77]         plan_rad_file = line[78:85]        plan_mass_file = line[86:96]        starTemp_file = line[97:105]        starRad_file = line[106:113]        check_dist_float =make_float(distance_in_file)*PARSEC_LY        if check_dist_float<0 or (check_dist_float)>maximum_distance:            continue                num_star = int(num_star_sysm)        num_plan = int(num_plan_sysm)        pl_axis = make_float(axis_in_file)        pl_rad = make_float(plan_rad_file)        pl_mass= make_float(plan_mass_file)        st_rad = make_float(starRad_file)        st_temp = make_float(starTemp_file)                if num_star>max_str:            max_str = num_star                   if num_plan>max_pl:            max_pl = num_plan               if pl_mass >0:            sum_mass += pl_mass                  count += 1                    if pl_mass >0 or pl_rad>0:            call_density = get_density(pl_mass,pl_rad)                    if temp_in_range(pl_axis, st_temp, st_rad, albedo, low_bound, upp_bound) == True:                      habit += 1            if(0<pl_mass and pl_mass<10) or(0<pl_rad and pl_rad<1.5) or (call_density>2000):                      rocky_planet+= 1                if (rocky_close>=check_dist_float):                   rocky_close = check_dist_float                   rocky_close_name = plan_name            else:                         gas_planet +=1                if(gas_close>=check_dist_float):                    gas_close = check_dist_float                    gas_close_name = plan_name    average_mass = sum_mass/count       print()    print("Number of stars in systems with the most stars: {:d}.".format(max_str))      print("Number of planets in systems with the most planets: {:d}.".format(max_pl))    print("Average mass of the planets: {:.2f} Earth masses.".format(average_mass))    print("Number of planets in circumstellar habitable zone: {:d}.".format(habit))    if rocky_close_name == "":        print("No rocky planet in circumstellar habitable zone.")    else:        print("Closest rocky planet in the circumstellar habitable zone {:1s} is {:.2f} light years away.".format(rocky_close_name,rocky_close))    if gas_close_name == "":        print("No gaseous planet in circumstellar habitable zone.")    else:        print("Closest gaseous planet in the circumstellar habitable zone {:1s} is {:.2f} light years away.".format(gas_close_name,gas_close))            if __name__ == "__main__":    main()